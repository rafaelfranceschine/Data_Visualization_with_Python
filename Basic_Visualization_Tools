#DOWNLOADING AND PREPPING DATA
#--------------------------------------------------------------------------

import pandas as pd     #importing the pandas primary data structure library
import numpy as np     #importing the useful numpy scientific computing library

!conda install -c anaconda xlrd --yes     #downloading pandas module that is required to read in excel files

df = pd.read_excel(path,sheet_name='name_of_the_sheet',skiprows=range('range_of_rows_to_skip'),skipfooter='number_of_rows_to_skip')     #reading an excel file and returning it to an object

df.head()     #visualizing the first rows of the dataframe
df.tail()     #visualizing the last rows of the dataframe
df.shape()     #visualizing the dimensions of the dataframe

df.drop(['column_name', 'column_name'], axis=1, inplace=True)     #cleaning the data that are not informative ("axis=1" is for dropping columns)
df.head()     #visualizing the cleaned dataframe

df.rename(columns={'OldName':'NewName', 'OldName':'NewName'}, inplace=True)     #renaming the column labels
df.columns     #visualizing if the column labels are changed

all(isinstance(column, str) for column in df.columns)     #checking if all of the titles of the columns are strings
df.columns = list(map(str, df.columns))     #changing all of the column labels to strings
all(isinstance(column, str) for column in df.columns)     #checking if all of the titles of the columns are now correctly strings

df.set_index('ColumnLabel', inplace=True)     #setting a specific column label as the index
df.head()     #checking if the index is changed

df['ColumnLabel'] = df.function(axis=1)     #adding a column that is a function of all of the others (example of functions: sum, max, min)

list(map(str,range('first_column','last_column_plus_one')))     #creating a list of strings that contains a range of column labels (example: a range of years)



#VISUALIZING DATA USING MATPLOTLIB
#--------------------------------------------------------------------------

%matplotlib inline     #downloading the inline backend to generate the plots within the browser

import matplotlib as mpl     #importing the matplotlib as mpl
import matplotlib.pyplot as plt     #importing the matplotlib.pyplot as plt

mpl.style.use('name_of_the_style')     #setting a style to the plot

print('Matplotlib version: ', mpl.__version__)     #printing the version of the matplotlib

df.sort_values(['Column_Label'], ascending=False, axis=0, inplace=True)     #sorting the dataframe based on a specific column

#AREA PLOT
#--------------------------------------------------------------------------

df_first5 = df.head()     #getting a dataframe which contains just the first five rows (obs.: you can also specify the columns to get)

df_first5 = df_first5.transpose()     #transposing the dataframe so it can be correctly plotted

df_first5.head()     #verifying if the dataframe is correct for plotting

df_first5.index = df_first5.index.map(int)     #changing the index to integers for plotting

df_first5.plot(kind='area',stacked=bool,figsize=(x,y))     #generating an area plot (obs.: it can be stacked or not)

plt.title('Title of the chart')     #setting the title of the chart
plt.ylabel('Title of the y label')     #setting the title of the y label
plt.xlabel('Title of the x label')     #setting the title of the x label

plt.show()     #showing the plot



#PLOTTING WITH ARTIST LAYER
#--------------------------------------------------------------------------

ax = df.plot(kind='chart kind',stacked=bool,figsize=(x,y))     #returning the plotting to the object ax

ax.title('Immigration Trend of Top 5 Countries')     #setting the title of the chart
ax.ylabel('Number of Immigrants')     #setting the title of the y label
ax.xlabel('Years')     #setting the title of the x label



#HISTOGRAM PLOT
#--------------------------------------------------------------------------


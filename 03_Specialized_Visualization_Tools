#DOWNLOADING LIBRARIES
#--------------------------------------------------------------------------

import pandas as pd     #importing the pandas primary data structure library
import numpy as np     #importing the useful numpy scientific computing library



#IMPORTING DATAFRAMES
#--------------------------------------------------------------------------

df = pd.read_format(path)     #importing the dataframes (obs.: check the pandas website for informations about each format)

!conda install -c anaconda xlrd --yes     #downloading pandas module that is required to read in excel files
df = pd.read_excel(path, sheet_name=str, skiprows=range(int), skipfooter=numberOfRowsToSkip_int)     #importing the dataframe from excel



#CHECKING THE DATAFRAME
#--------------------------------------------------------------------------

df.head()     #returning the first rows of the dataframe
df.tail()     #returning the last rows of the dataframe
df.shape()     #returning the dimensions of the dataframe
df.columns     #returning the names of all of the columns
df.index     #returning the index of the dataframe
df.describe()     #returning statistics of the dataframe
df.isnull().sum()      #returning the number of null datas of each column of the the dataframe
all(isinstance(column, str) for column in df.columns)     #checking if all columns labels are strings

df.loc[rows_strList, acolumns_strList]     #returning a dataframe with the specified rows and columns
df[ColumnLabels_List]     #returning a dataframe with the specified columns



#CLEARING THE DATAFRAME
#--------------------------------------------------------------------------

df.dropna()     #drop the rows where at least one element is missing
df.drop(ColumnLabels_list, axis=1, inplace=True)     #dropping the columns that aren't necessary ("axis=1" is for columns)
df.rename(columns={OldLabel_str: NewLabel_str, OldLabel_str: NewLabel_str}, inplace=True)     #renaming the specified column labels
df.replace(OldValue, NewValue)     #replace the values of the dataframe
df.columns = list(map(str, df.columns))     #changing all of the column labels to strings
df.set_index(columnLabel_str, inplace=True)     #set a specific column as the index
df.sort_values([columnLabel_str], ascending=False, axis=0, inplace=True)     #sorting the dataframe based on a specific column



#MANIPULATING THE DATAFRAME
#--------------------------------------------------------------------------

df[ColumnLabel_str] = df.function(axis=1)     #adding a column that is a function of all of the others (example of functions: sum, max, min)
list(map(str, range(firstColumn_int, lastColumnPlusOne_int)))     #creating a list that contains a range of column labels (example: range of years)

df.set_index(ColumnLabel_str, inplace=True)     #setting a specific column as the index
df.index = df.index.map(type)     #changing the index to another type



#CREATING AND EDITING NEW DATAFRAMES
#--------------------------------------------------------------------------

new_df = df.loc[rows_strList,columns_strList]     #creating a dataframe with the specified rows and columns
new_df = df[[ColumnLabels_List]]     #creating a dataframe with the specified columns
new_df = df.head()     #creating a dataframe with the first five rows
new_df = df.tail()     #creating a dataframe with the last five rows
new_df = df.transpose()     #creating a new transposed dataframe



#IMPORTING AND SETTING MATPLOTLIB
#--------------------------------------------------------------------------

%matplotlib inline     #downloading the inline backend to generate the plots within the browser
import matplotlib as mpl     #importing the matplotlib as mpl
import matplotlib.pyplot as plt     #importing the matplotlib.pyplot as plt

mpl.style.use(style_str)     #setting a style to the plot

for name, hex in matplotlib.colors.cnames.items():
    print(name, hex)     #checking the full list of available colors



#PLOTTING WITH SCRIPTING LAYER
#--------------------------------------------------------------------------

df.plot(kind=str, stacked=bool, figsize=(x_int, y_int), alpha=tranparency_float, xticks=bin_edges, color=strList)     #creating the plot

plt.title(title_str)     #setting the title of the chart
plt.ylabel(title_str)     #setting the title of the y label
plt.xlabel(title_str)     #setting the title of the x label
plt.text(x_int, y_int, label_str)     #adding a label in the the chart

plt.show()     #showing the plot



#PLOTTING WITH ARTIST LAYER
#--------------------------------------------------------------------------

ax = df.plot(kind=str, stacked=bool, figsize=(x, y))     #returning the plotting to the object ax

ax.title(title_str)     #setting the title of the chart
ax.ylabel(title_str)     #setting the title of the y label
ax.xlabel(title_str)     #setting the title of the x label


